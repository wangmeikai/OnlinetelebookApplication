<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wmk.onlinetelebook.mapper.UserMapper">





<!--    <cache-->
<!--        type = "org.mybatis.caches.ehcache.LoggingEhcache"-->
<!--        eviction = "LRU"-->
<!--        flushInterval = "1000"-->
<!--        size = "100"-->
<!--        readOnly  = "true"-->
<!--        blocking = "true"-->
<!--    />-->
    <!--type：指定使用的缓存类，mybatis默认使用HashMap进行缓存,可以指定第三方缓存-->
    <!--eviction：默认是 LRU 淘汰缓存的算法，有如下几种：-->
    <!--1.LRU – 最近最少使用的:移除最长时间不被使用的对象。-->
    <!--2.FIFO – 先进先出:按对象进入缓存的顺序来移除它们。-->
    <!--3.SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。-->
    <!--4.WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象-->
    <!--flushInterval：清空缓存的时间间隔，单位毫秒，可以被设置为任意的正整数。
                       默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。-->
    <!--size：缓存对象的个数，任意正整数，默认值是1024。-->
    <!--readOnly：缓存是否只读，提高读取效率-->
    <!--blocking：是否使用阻塞缓存，默认为false，当指定为true时将采用BlockingCache进行封装，blocking，
                  阻塞的意思，使用BlockingCache会在查询缓存时锁住对应的Key，如果缓存命中了则会释放对应的锁，
                  否则会在查询数据库以后再释放锁这样可以阻止并发情况下多个线程同时查询数据，详情可参考BlockingCache的源码。-->
</mapper>

